---
- name: Ensure ZSH,GIT packages
  package: 
    name: 
      - zsh
      - git-core
    state: present
  register: installation
  when: "ansible_system == 'Linux'"
  become: true

- name: "Set developer user home path for Linux"
  ansible.builtin.set_fact:
    developer_user_home: "/home/{{ developer_username }}"
  when: "ansible_system == 'Linux' and developer_username is defined"

- name: "Set developer user home path for macOS"
  ansible.builtin.set_fact:
    developer_user_home: "/Users/{{ developer_username }}"
  when: "ansible_system == 'Darwin' and developer_username is defined"

- name: Check if .oh-my-zsh exists
  stat:
    path: "/root/.oh-my-zsh/"
  register: stat_oh_my_zsh_result_basedir
  when: "ansible_system == 'Linux'"
  become: true

- name: Check if .oh-my-zsh/.git exists
  stat:
    path: "/root/.oh-my-zsh/.git"
  register: stat_oh_my_zsh_result
  when: "ansible_system == 'Linux'"
  become: true

- name: Remove /root/.oh-my-zsh
  ansible.builtin.file:
    path: "/root/.oh-my-zsh"
    state: absent
  when: "ansible_system == 'Linux' and not stat_oh_my_zsh_result.stat.exists"
  become: true

- name: "Clone ohmyzsh to /root/.oh-my-zsh"
  git:
    repo: 'https://github.com/ohmyzsh/ohmyzsh.git'
    dest: "/root/.oh-my-zsh"
    version: master
  when: "ansible_system == 'Linux' and not stat_oh_my_zsh_result.stat.exists"
  become: true

- name: Creating new /root/.zshrc
  copy:
    src: /root/.oh-my-zsh/templates/zshrc.zsh-template
    dest: /root/.zshrc
    remote_src: yes
  when: ansible_system == 'Linux' and not stat_oh_my_zsh_result_basedir.stat.exists
  become: true

- name: "Configure theme hostname"
  shell: echo $(hostname -s) > /root/.box-name
  args:
    executable: /bin/bash
  when: ansible_system == 'Linux'
  become: true

- name: "Configure theme"
  lineinfile:
    dest: /root/.zshrc
    state: present
    regexp: '^ZSH_THEME='
    line: 'ZSH_THEME="fino-time"'
  when: "ansible_system == 'Linux'"
  become: true

- name: "Enable oh-my-zsh update"
  lineinfile:
    dest: /root/.zshrc
    state: present
    regexp: "^zstyle ':omz:update'"
    line: "zstyle ':omz:update' mode auto"
  when: "ansible_system == 'Linux'"
  become: true

- name: "Check if .oh-my-zsh exists"
  stat: 
    path: "{{ developer_user_home }}/.oh-my-zsh"
  register: stat_oh_my_zsh_result_basedir
  become: true
  become_user: "{{ developer_username }}"
  when: developer_username is defined

- name: "Check if {{ developer_username }} .zshrc exists"
  stat:
    path: "{{ developer_user_home }}/.zshrc"
  register: stat_user_zshrc_result
  become: true
  become_user: "{{ developer_username }}"
  when: developer_username is defined

- name: "Check if .oh-my-zsh/.git exists"
  stat: 
    path: "{{ developer_user_home }}/.oh-my-zsh/.git"
  register: stat_oh_my_zsh_result
  become: true
  become_user: "{{ developer_username }}"
  when: developer_username is defined

- name: Remove {{ developer_user_home }}/.oh-my-zsh/
  ansible.builtin.file:
    path: "{{ developer_user_home }}/.oh-my-zsh/"
    state: absent
  when: "ansible_system == 'Linux' and not stat_oh_my_zsh_result.stat.exists"
  become: true

- name: "Clone ohmyzsh to {{ developer_user_home }}/.oh-my-zsh"
  git:
    repo: 'https://github.com/ohmyzsh/ohmyzsh.git'
    dest: "{{ developer_user_home }}/.oh-my-zsh"
    version: master
  when: "developer_username is defined and not stat_oh_my_zsh_result.stat.exists"

- name: Creating new {{ developer_user_home }}/.zshrc
  copy:
    src: "{{ developer_user_home }}/.oh-my-zsh/templates/zshrc.zsh-template"
    dest: "{{ developer_user_home }}/.zshrc"
    remote_src: yes
  when: developer_username is defined and not stat_user_zshrc_result.stat.exists
  become: true
  become_user: "{{ developer_username }}"

- name: "Configure theme hostname for{{ developer_username }}"
  shell: echo $(hostname -s) > /{{ developer_user_home }}/.box-name
  args:
    executable: /bin/bash
  become: true
  become_user: "{{ developer_username }}"
  when: developer_username is defined

- name: "Configure theme for {{ developer_username }}"
  lineinfile:
    dest: "{{ developer_user_home }}/.zshrc"
    state: present
    regexp: '^ZSH_THEME='
    line: 'ZSH_THEME="fino-time"'
  become: true
  become_user: "{{ developer_username }}"
  when: developer_username is defined

- name: "Add SSH agent configuration to root .zshrc"
  blockinfile:
    dest: /root/.zshrc
    block: |
      # SSH Agent configuration
      [[ -f /tmp/ssh_agent_default.env ]] && {
        eval "$(cat /tmp/ssh_agent_default.env)"
      } || {
        ssh-agent -s > /tmp/ssh_agent_default.env
        eval "$(cat /tmp/ssh_agent_default.env)"
        # Load all private keys
        for key in ~/.ssh/id_*; do
          [[ -f "$key" && ! "$key" =~ \.pub$ ]] && ssh-add "$key" 2>/dev/null
        done
      }
    marker: "# {mark} ANSIBLE MANAGED BLOCK - SSH Agent"
    insertafter: EOF
  when: "ansible_system == 'Linux'"
  become: true

- name: "Add SSH agent configuration to {{ developer_username }} .zshrc"
  blockinfile:
    dest: "{{ developer_user_home }}/.zshrc"
    block: |
      # SSH Agent configuration
      [[ -f /tmp/ssh_agent_default.env ]] && {
        eval "$(cat /tmp/ssh_agent_default.env)"
      } || {
        ssh-agent -s > /tmp/ssh_agent_default.env
        eval "$(cat /tmp/ssh_agent_default.env)"
        # Load all private keys
        for key in ~/.ssh/id_*; do
          [[ -f "$key" && ! "$key" =~ \.pub$ ]] && ssh-add "$key" 2>/dev/null
        done
      }
    marker: "# {mark} ANSIBLE MANAGED BLOCK - SSH Agent"
    insertafter: EOF
  become: true
  become_user: "{{ developer_username }}"
  when: developer_username is defined
